####7.2 上锁与解锁

互斥锁指代相互排斥，他是最基本的同步形式，互斥所用来保护临界区，来保证任何时刻只有一个线程在执行代码，或者任何时刻只有一个进程在执行其中的代码，保护一个临界区大体代码如下：

	lock_the_mutex(...);
	
	临界区
	
	unlock_the_mutex(...);
	
既然任何时刻只有一个线程能锁住给定的互斥锁，于是这样的代码保证任何时刻只有一个线程在执行其临界区的指令。

posix互斥锁声明为具有pthread_mutex_t数据类型的变量。如果互斥锁变量是静态分配的，那么我们可以把它初始化常值PTHREAD_MUTEX_INITIALIZER例如：

	static pthread_mutex_t lock=PTHREAD_MUTEX_INITIALIZER 
	
如果互斥锁是动态分配的，或者分配在共享内存中，那么我们必须在运行代码的时候调用pthread_mutex_init 函数来初始化它。

下面三个函数给一个互斥锁上锁和解锁。

	#include <pthread.h>
	
	int pthread_mutex_lock(pthread_mutex_t *mptr);
	int pthread_mutex_trylock(pthread_mutex_t *mptr);
	int pthread_mutex_unlock(pthread_mutex_t *mptr);
	
	均返回：若成功则为0，若出错则返回errno
	
如果尝试给一个已经由另外某个线程锁住互斥锁上锁，那么pthread_mutex_lock将会阻塞一直到这个锁解锁为止。pthread_mutex_trylock是对应的非阻塞函数，如果互斥锁已经锁住会返回一个EBUSY错误。

尽管我们说互斥锁保护的是临界区，实际上保护的是在临界区中被操作的数据。也就是说，互斥锁通常由用于保护由多个线程或多个进程分享的共享数据。

互斥锁是协作性锁。实际上保护的是临界区中被操作的数据。也就是说，互斥锁通常用于保护由多个线程或者多个进程分享的共享数据。

互斥锁是协作性。这就是说，如果共享数据是一个链表，那么操纵这个链表的所有线程都必须在实际操作前获取这个互斥锁，不过也没有办法防止某个线程不首先获取该互斥锁就操作这个链表。